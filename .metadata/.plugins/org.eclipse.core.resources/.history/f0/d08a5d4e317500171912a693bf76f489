/*
 ============================================================================
 Name        : Calc.c
 Author      : Michael A. Morris
 Version     : 0.0.1
 Copyright   : Copyright 2017, GPLv3
 Description : Calculator in C, ANSI-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#include "common.h"
#include "error.h"
#include "ScannerPascal.h"
#include "symtab.h"

#define STACK_SIZE 32

/*
 * Externals
 */

extern TOKEN_CODE token;
extern char       token_string[];
extern char       word_string[];
extern LITERAL    literal;

/*
 * Function prototypes
 */

void assignment_statement(void);

void expression(void);
void simple_expression(void);
void term(void);
void factor(void);

/*
 * Globals  -   Implement a floating point evaluation stack and provide
 *              two functions for accessing the stack for postfix
 *              calculations:
 *
 *                  void push(float) - a function
 *                  float pop()      - a macro
 */

float stack[STACK_SIZE];
float *tos = stack;

void push(float);           // Pushes value onto the stack
#define pop()   *tos--      // Returns value popped off the stack


int main(int argc, char *argv[])
{
	/*
	 * Initialize Scanner
	 */

	init_scanner(argv[1]);

	/*
	 * Process file using function assignment_statement() until
	 * a PERIOD or the end of file is found.
	 */

	get_token();
	do {
		if(IDENTIFIER == token) assignment_statement();

		/*
		 * After an expression, there should be a semicolon, a period, or
		 * an EOF. If not, skip tokens until there is such a token.
		 */

		while(   (SEMICOLON != token)
			  && (PERIOD != token)
			  && (END_OF_FILE != token) ) {
			error(INVALID_EXPRESSION);
			get_token();
		}

		/*
		 * Re-synchronize by skipping trailing semicolons.
		 */

		while(SEMICOLON == token) get_token();

	} while((PERIOD != token) && (END_OF_FILE != token));

	return EXIT_SUCCESS;
}

/*
 * void expression(void)    Process an expression, which is just a simple
 *                          expression at this time.
 */

void expression(void)
{
	simple_expression();
}

/*
 * void simple_expression(void)     Process a simple expression consisting
 *                                  terms separated by '+' or '-' operators.
 *
 *  Syntax diagram for a simple expression:
 *
 *      term {{+, -} term}
 */

void simple_expression(void)
{
	TOKEN_CODE op;
	char       *op_string;

	term();     // simple expressions start with a term.

	/*
	 * Loop to process subsequent terms separated by operators.
	 */

	while((PLUS == token) || (MINUS == token)) {
		op = token;     // remember the operator

		get_token(); term();

		switch(op) {
		case PLUS :
			op_string = "+";
			break;

		case MINUS :
			op_string = "-";
			break;

		default :
			break;
		}
		output_postfix(op_string);
	}
}

/*
 * void term(void)      Process a term consisting of factors separated by
 *                      operators '*' or '/'.
 *
 *  Syntax diagram for a term:
 *
 *      factor {{*, /} factor}
 */

void term(void)
{
	TOKEN_CODE op;
	char       *op_string;

	factor();

	/*
	 * Loop to process subsequent factors separated by operators.
	 */

	while((STAR == token) || (SLASH == token)) {
		op = token;     // remember the operator

		get_token(); factor();

		switch(op) {
		case STAR :
			op_string = "*";
			break;

		case SLASH :
			op_string = "/";
			break;

		default :
			break;
		}
		output_postfix(op_string);
	}
}

/*
 * void factor(void)    Process a factor, which is an identifier, a number,
 *                      or another expression inside of parenthesis.
 */

void factor(void)
{
	if((IDENTIFIER == token) || (NUMBER == token)) {
		output_postfix(token_string);
		get_token();
	} else if(LPAREN == token) {
		get_token(); expression();  // recursive call to expression()

		if(RPAREN == token) {
			get_token();
		} else {
			error(MISSING_RPAREN);
		}
	} else {
		error(INVALID_EXPRESSION);
	}
}

/*
 * void output_postfix(char *)  Append the input string, preceded by a
 *                              blank to the postfix buffer.
 */

void output_postfix(char *string)
{
	*pp++ = ' ';
	*pp   = '\0';
	strcat(pp, string);
	pp += strlen(string);
}
