/*
 * ScannerPascal.h
 *
 *  Created on : Jul 23, 2017
 *  Author     : Michael A. Morris
 *  Description: Provides the definitions of the types needed to
 *               implement the scanner and tokenizer for Pascal.
 *               Easily modified to support other HLL and assem-
 *               bly language implementations.
 *  Copyright  : Copyright 2017, GPLv3
 */

#ifndef SCANNERPASCAL_H_
#define SCANNERPASCAL_H_

#include "common.h"

/*
 * Character Code Types
 */

typedef enum {
	LETTER, DIGIT, SPECIAL, EOF_CODE,
} CHAR_CODE;

/*
 * Token Codes
 */

typedef enum {
	NO_TOKEN, IDENTIFIER, NUMBER, STRING,
	UPARROW, STAR, LPAREN, RPAREN, MINUS, PLUS, EQUAL,
	LBRACKET, RBRACKET, COLON, SEMICOLON, LT, GT, COMMA, PERIOD,
	SLASH, COLONEQUAL, LE, GE, NE, DOTDOT, END_OF_FILE, ERROR,
	AND, ARRAY, BEGIN, CASE, CONST, DIV, DO, DOWNTO, ELSE, END,
	FFILE, FOR, FUNCTION, GOTO, IF, IN, LABEL, MOD, NIL, NOT,
	OF, OR, PACKED, PROCEDURE, PROGRAM, RECORD, REPEAT, SET,
	THEN, TO, TYPE, UNTIL, VAR, WHILE, WITH,
} TOKEN_CODE;

/*
 * Literal Structure Definition
 */

typedef enum {
	INTEGER_LIT, REAL_LIT, STRING_LIT,
} LITERAL_TYPE;

typedef struct {
	LITERAL_TYPE type;
	union {
		int   integer;
		float real;
		char  string[MAX_SOURCE_LINE_LENGTH];
	} value;
} LITERAL;

// Scanner and Token Processing Function Prototypes

void init_scanner(char name[]);
void quit_scanner(void);

void get_token(void);
void print_token(void);

void open_source_file(char name[]);
void close_source_file(void);

#endif /* SCANNERPASCAL_H_ */
